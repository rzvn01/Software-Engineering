package lab6;

import java.util.Scanner;

/**
 * Cacu Razvan GR-2023
 * Write a Java application which, within the main() method, contains a squence of code that may throw various
 * exceptions, such as ArithmeticException, ArrayIndexOutOfBoundsException, NullPointerException,
 * NumberFormatException, as well as others which you consider to be useful for testing. In the catch block show the
 * corresponding message generated by these exceptions. The finally block just prints the message, "I may or may not have
 * caught an exception".
 */

public class Lab6Prb2 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        try {
            double val;
            int[] x = {1, 2};
            System.out.println("ArithmeticException?(yes/no)");
            if (scanner.nextLine().equalsIgnoreCase("yes"))
                val = 1 / 0;
            System.out.println("ArithmeticException?(yes/no)");
            if (scanner.nextLine().equalsIgnoreCase("yes"))
                System.out.println(x[3]);

            System.out.println("NumberFormatException?(yes/no)");
            if (scanner.nextLine().equalsIgnoreCase("yes"))
                val = Double.parseDouble("x");

        } catch (ArithmeticException e) {
            System.out.println("Threw ArithmeticException: " + e.getMessage());
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("Threw ArrayIndexOutOfBoundsException : " + e.getMessage());
        } catch (NumberFormatException e) {
            System.out.println("Threw NumberFormatException: " + e.getMessage());
        } finally {
            System.out.println("I may or may not have caught an exception.");
        }
    }
}